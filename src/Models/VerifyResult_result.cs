// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.TrustedForm.Certificates.OpenApiClient.Models
{
    /// <summary>
    /// An object containing properties that detail the result of the verify operation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class VerifyResult_result : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A boolean indicating whether the form was successfully submitted by the consumer. true means a form submission was detected, while false indicates that the form was abandoned before submission. This field will only influence the one_to_one check result, not the overall Verify outcome.</summary>
        public bool? FormSubmitted { get; set; }
        /// <summary>A boolean indicating if any of the consent languages found have been approved in your accountâ€™s consent language manager.</summary>
        public bool? LanguageApproved { get; set; }
        /// <summary>A boolean indicating whether the contrast ratio between the consent language text and background meets or exceeds the required minimum contrast ratio.  true means the contrast requirement was satisfied, while false means it was insufficient. A null value is returned when the min_contrast_ratio_required is missing, and the check could not be performed.</summary>
        public bool? MinContrastRatioSatisfied { get; set; }
        /// <summary>A boolean indicating whether the consent language meets or exceeds the required minimum font size. true means the font size requirement was satisfied, while false indicates it was not. A null value is returned when the min_font_size_px_required is missing, and the check could not be performed.</summary>
        public bool? MinFontSizePxSatisfied { get; set; }
        /// <summary>A boolean indicating if the cert structure satisfied the requirements for 1:1 consent. You must pass the `advertiser_name` for the check to be performed. A `null` value is returned when consent tags were not used, or when the `advertiser_name` is missing, and the consent check could not be performed.</summary>
        public bool? OneToOne { get; set; }
        /// <summary>A boolean indicating whether all the opt-in types on the form match one or more of the allowed opt-in types specified in the opt_in_types_allowed parameter. true means all opt-in types on the form meet the specified criteria.  false means at least one opt-in type on the form does not match any of the allowed types. A null value is returned when the opt_in_types_allowed is missing, and the check could not be performed.</summary>
        public bool? OptInTypesSatisfied { get; set; }
        /// <summary>A boolean indicating whether all Verify checks succeeded.</summary>
        public bool? Success { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.TrustedForm.Certificates.OpenApiClient.Models.VerifyResult_result"/> and sets the default values.
        /// </summary>
        public VerifyResult_result()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.TrustedForm.Certificates.OpenApiClient.Models.VerifyResult_result"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.TrustedForm.Certificates.OpenApiClient.Models.VerifyResult_result CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.TrustedForm.Certificates.OpenApiClient.Models.VerifyResult_result();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "form_submitted", n => { FormSubmitted = n.GetBoolValue(); } },
                { "language_approved", n => { LanguageApproved = n.GetBoolValue(); } },
                { "min_contrast_ratio_satisfied", n => { MinContrastRatioSatisfied = n.GetBoolValue(); } },
                { "min_font_size_px_satisfied", n => { MinFontSizePxSatisfied = n.GetBoolValue(); } },
                { "one_to_one", n => { OneToOne = n.GetBoolValue(); } },
                { "opt_in_types_satisfied", n => { OptInTypesSatisfied = n.GetBoolValue(); } },
                { "success", n => { Success = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("form_submitted", FormSubmitted);
            writer.WriteBoolValue("language_approved", LanguageApproved);
            writer.WriteBoolValue("min_contrast_ratio_satisfied", MinContrastRatioSatisfied);
            writer.WriteBoolValue("min_font_size_px_satisfied", MinFontSizePxSatisfied);
            writer.WriteBoolValue("one_to_one", OneToOne);
            writer.WriteBoolValue("opt_in_types_satisfied", OptInTypesSatisfied);
            writer.WriteBoolValue("success", Success);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
